{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Contributions:\
- better performance than Strassen/MKL\
- flexible fast algorithms that can be chosen based on size/shape\
- code generation for fast evaluation\
- hybrid parallel algorithm for shared memory\
\
\
Topics to cover:\
\
- U/V/W representation of matrix multiplication algorithms\
- Search and discovery of fast algorithms\
- <m, n, k> and permutations\
- Explanation of rectangular generality of the above\
\
- Parallel algorithms: BFS, DFS, hybrid\
- Code generation, common subexpression elimination, automated parallelism\
\
- Sequential and parallel performance for square, outer product, inner product, short+fat times square\
- \'93Applications\'94 to LU and QR factorizations\
\
\
Paper outline:\
\
I Introduction\
- Contributions\
- O(n^3) vs O(n^\\omega)\
- Gap between theory and practice\
\
II Fast matrix multiplication\
- U/V/W representation\
- Search and discovery\
- Generality of the search (forward reference how this helps a code generation scheme)\
\
III Parallel algorithms\
- DFS, BFS, hybrid algorithms\
- Additions\
\
IV Implementation\
- Code generation\
- Common subexpression elimination\
- Design tradeoffs: temp matrices, copying to contiguous chunks, AXPYs vs. custom-written adds\
\
V Performance\
- Sequential, outer product, inner product, short+fat times square, sequential + parallel\
- LU and QR\
\
\
}